TypeScript is a super set of JavaScript.

Introduction to TypeScript:
JavaScript with type checking.
It is developed by Microsoft.
A programming language to address shortcomings of JavaScript.

Benefits:
-> static typing
-> Code completion.
-> Refactoring 
-> Shorthand notations.

Drawbacks:
-> Compilation

.ts ----> Compiler -----> .js (Transpilation)

-> Discipline in coding.


Setting up the development environment:

-> Node

npm i -g typescript

tsc  -v

tsc filename.ts  ---> js file

Ecma Script is a specification where as JavaScript is the implementation.

ES6 



Configuring TypeScript Compiler:

tsc --init

.json file will be generated

Enabled:

"module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src", 


"outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    "removeComments": true,

"noEmitOnError": true,


Debugging TypeScript Applications:

1) Go to tsconfig.json enable sorceMap feature
2) Recompile code we will have index.js.map (It is for debuggers)
3) Set a break point
4) Go to debug panel and click on create a launch .json file
5) From drop down click on node js --> launch.json
6) Add one setting preLaunchTask : "tsc: build - tsconfig.json"
7) Go back and start debugging


Fundamentals Of Type Script:

-> The any Type
-> Arrays
-> Tuples
-> Enums
-> Functions
-> Objects


Built in types:

TypeScript
* any
* unknown
* never
* enum
* tuple

JavaScript
* number
* string
* boolean
* null
* undefined
* object

The any type:

don't use any type only use if you are very clear about why you are using it.

We can skip type checking for any by making this as false
"noImplicitAny": false,


function render(document:any){
	console.log(document);
}

Running a TypeScript a file:

tsc filename.ts
node file name.js


Arrays in TypeScript:


let numbers:number[]=[1,2,3,4,5];
numbers.forEach(n=> console.log(n));

let numbers:number[]=[];
numbers[0]=1;
numbers[1]=2;
numbers[2]=2;

numbers.forEach(n=>console.log(n));

let numbers=[1,2,3,'4'];

numbers.forEach(n=> console.log(n));


Tuples:

Fixed length array.
Each element has a particular type.
internally they are represented as plane Java script arrays.


let user:[number,string]=[1,'Mosh'];

console.log(user);


Enums:

A list of related constants.

var small = 1;
var medium = 2;
var large = 3;
;
var mySize = 2 /* Size.Medium */;
console.log(mySize);
console.log(Size);

Functions:

Eg:

function calculateTax(income: number, taxYear =2022) :number{
    if(taxYear  < 2022)
        return income*1.2;
    return income*1.3;
}


function calculateTax(income: number, taxYear =2022) :number{
    if((taxYear || 2022) < 2022)
        return income*1.2;
    return income*1.3;
}

console.log(calculateTax(10_0000));


For optional you can use ?

console.log(calculateTax(10_0000));


-> As a best practice always properly annotate your functions with parameters and return types.

Enable these three noUnusedLocals, noUnusedParameters,noImplicitReturns.

Objects:

let employee : {
    readonly id:number,
    name: string
}={id: 1,name: 'Shaffi'};


let employee : {
    readonly id:number,
    name: string
    retire: (date : Date) =>void
}={id: 1,name: 'Shaffi',retire:(date : Date) =>{
    console.log(date);
}};

console.log(employee);


Advance Topics:

-> Type aliases
-> Unions and Intersections
-> Type Narrowing
-> Nullable Types
-> The unknown type
-> The never type

Type Alias:

type Employee = {
    readonly id:number,
    name: string
    retire: (date : Date) =>void

}

Union Types:

function kgToLbs(weight : number | string) : number{
    //Narrowing

    if(typeof weight =='number')
        return weight *2.2;
    else
        return parseInt(weight) * 3.2;
    
}

console.log(kgToLbs(10));
console.log(kgToLbs('10Kg'));

Intersection Types:

type Draggable ={
    drag:() => void
};

type Resizable ={
    resize:()=> void
};

type UIWidget=Draggable & Resizable;

let textBox: UIWidget={
    drag:()=> {},
    resize:()=>{}
}


Literal Types:

type Quantity= 50 | 100;
let quantity: Quantity =100;

type Metric= 'cm' | 'inch';

let metric: Metric= 'cm';


Nullable Types:

function greet(name:string | null | undefined){
    if(name)
        console.log(name.toUpperCase());
    else
        console.log('Hola!')
}

greet(null);


Optional Chaining:

type Customer ={
    birthday: Date
};

function getCustomer(id:number) : Customer | null | undefined{
return id==0 ? null : {birthday : new Date()};
}

let customer=getCustomer(1);

// if(customer !==null && customer !== undefined)
// Optional property access operator

    console.log(customer?.birthday.getFullYear())
// Optional element access operator
// if(customers !==null && customers !== undefines)
//      customers?.[0]

// Optional Call
//let log: any = (message : string) => console.log(message);

let log: any =null;
log?.('a');














