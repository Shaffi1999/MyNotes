Git and GitHub:

Git:

Version Control System is a tools that help to track changes in code.

Git is a Version Control System. It is:

-> Popular
-> Free and Open Source
-> Fast and scalable

To track the history
To collaborate

Github:

Website that allows developers to store and manage their code using Git.

https://github.com

Repositories(Folder where our code is present)

README: It is recommended to enable readme file option while creating repo as this gives us long description about the project.


add -> commit

Setting up Git:

Visual Studio Code

Windows(Git Bash)

Mac(Terminal)

git --version


Configuring Git:

git config --global user.name "My Name".

git config --global user.email "someone@email.com"

git config --list


Clone and Status:

Clone - Cloning a repository on our local  machine

git clone <-some link->

status - displays the state of the code

git status


Modify:

1)add
2)commit

Untracked:

new files that git does not yet track

modified:

changed

staged:

file is ready to be committed

unmodified:

unchanged

Modified/Untracked ---> add(staged) ---> commit(unchanged)


Add and Commit :

add - adds new or changes files in your working directory to the Git Staging area.

git add <-file name->

git add .(add all files) 

commit - It is the record of change

git commit -m "commit message" 

Push Command:

push - upload local repo content to remote repo

git push origin main
	    |
	    |	
	 Default Repo

Init Command:

init - init is used  to create a new git repo

git init

git remote add origin<-link->

git remote -v (to verify remote)

git branch (to check branch)

git branch -M main (to rename branch)

git push origin main

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   README.md


WorkFlow:

Local Git:

Github repo ---> clone ---> changes ----> add ----> commit ----> push

Git Branches:

git branch (to check branch)

git branch -M main (to rename branch)

git checkout <-branch name-> (to navigate)

git checkout -b <-new branch name-> (to create new branch)

git branch -d <-branch name-> (to delete branch)

Merging Code

Way 1:

git diff <-branch name-> (to compare commits,branches,files and more)

git merge <-branch name-> (to merge 2 branches)

Way 2

Create a PR

Pull Request:

It lets you tell others about changes you have pushed to a branch in a repository on GitHub.

Branch ---> Main (Sr DEV) PR Review

Pull Command:

git pull origin main

used to fetch and download content from a remote repo and immediately update the loca repo to match that content.


Resolving Merge Conflicts:

An event that takes place when Git is unable to automatically resolve differences in code between two commits.



Undoing Changes:

Case 1: staged changes
	
	git reset <-file name->

Case 2: commited changes (for one commit)

	git reset HEAD~1

Case 3: commited changes (for many commits)

	git reset <-commit hash->
	
	git reset --hard<-commit hash->









